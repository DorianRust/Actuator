buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "ru.vyarus:gradle-animalsniffer-plugin:1.2.0"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
//        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.5.2"
    }
}

group = "com.github.tronprotocol"
ext.githubProjectName = "chainbase"

version = project.properties["release.version"]

def releaseTag = System.getenv("TRAVIS_TAG");
if (releaseTag != null && !releaseTag.isEmpty()) {
    if (releaseTag.startsWith("v")) {
        releaseTag = releaseTag.substring(1);
    }
    version = releaseTag;
    project.properties.put("release.version", releaseTag);

    println("Releasing with version " + version);
}

description = "chainbase â€“ a decentralized database for blockchain."

apply plugin: "java-library"
//apply plugin: "checkstyle"
apply plugin: "jacoco"
apply plugin: "ru.vyarus.animalsniffer"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "osgi"
//apply plugin: "me.champeau.gradle.jmh"
//apply plugin: "com.github.hierynomus.license"
apply plugin: "com.jfrog.bintray"
apply plugin: "com.jfrog.artifactory"
apply plugin: "eclipse"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Dependency versions
// ---------------------------------------

def junitVersion = "4.12"
def reactiveStreamsVersion = "1.0.2"
def mockitoVersion = "2.1.0"
def jmhLibVersion = "1.20"
def testNgVersion = "6.11"
def guavaVersion = "24.1-jre"
def jacocoVersion = "0.8.0"
def leveldbVersion = "1.8"
def logbackVersion = "1.2.3"
def jansiVersion = "1.16"
def lombokVersion = "1.18.2"
def slf4jVersion = "1.7.25"
// --------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    signature "org.codehaus.mojo.signature:java16:1.1@signature"
    
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "org.testng:testng:$testNgVersion"

    compile "com.google.guava:guava:$guavaVersion"
    compile "org.fusesource.leveldbjni:leveldbjni-all:$leveldbVersion"
    compile "org.fusesource.jansi:jansi:$jansiVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.projectlombok:lombok:$lombokVersion"
}

//javadoc {
//    failOnError = false
//    exclude "**/test/**"
//    options {
//        windowTitle = "Chainbase Javadoc ${project.version}"
//    }
//    // Clear the following options to make the docs consistent with the old format
//    options.addStringOption("top").value = ""
//    options.addStringOption("doctitle").value = ""
//    options.addStringOption("header").value = ""
//    options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");
//
//    options.links(
//            "https://docs.oracle.com/javase/7/docs/api/"
//    )
//
//    if (JavaVersion.current().isJava7()) {
//        // "./gradle/stylesheet.css" only supports Java 7
//        options.addStringOption("stylesheetfile", rootProject.file("./gradle/stylesheet.css").toString())
//    }
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = "javadoc"
//    from javadoc.destinationDir
//}

artifacts {
    archives jar
    archives sourcesJar
//    archives javadocJar
}

jar {
    manifest {
        name = "chainbase"
        instruction "Bundle-Vendor", "chainbase Contributors"
        instruction "Bundle-DocURL", "https://github.com/tronprotocol/chainbase"
        instruction "Import-Package", "!org.junit,!junit.framework,!org.mockito.*,!org.testng.*,*"
        instruction "Eclipse-ExtensibleAPI", "true"
    }
}
//
//license {
//    header rootProject.file("HEADER")
//    ext.year = Calendar.getInstance().get(Calendar.YEAR)
//    skipExistingHeaders true
//    ignoreFailures true
//    excludes(["**/*.md", "**/*.txt"])
//}

apply plugin: "maven-publish"

install {
    repositories.mavenInstaller.pom.project {
        name "chainbase"
        description "a decentralized database for blockchain"
        url "https://github.com/tronprotocol/chainbase"
        licenses {
            license {
                name "GNU Lesser General Public License v3.0"
                url "https://www.gnu.org/licenses/lgpl-3.0.en.html"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "Yrp"
                name "Matt"
                email "yrp1990@gmail.com"
            }
        }
        scm {
            connection "scm:git:git@github.com:tronprotocol/chainbase.git"
            url "scm:git:git@github.com:tronprotocol/chainbase.git"
            developerConnection "scm:git:git@github.com:tronprotocol/chainbase.git"
        }
        issueManagement {
            system "github"
            url "https://github.com/tronprotocol/chainbase/issues"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact (sourcesJar) {
                classifier = "sources"
            }
        }
    }
}

// Reactive-Streams as compile dependency
publishing.publications.all {
    pom.withXml {
        asNode().dependencies."*".findAll() {
            it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each { it.scope*.value = "compile"}
    }
}

//jmh {
//    jmhVersion = jmhLibVersion
//    humanOutputFile = null
//    includeTests = false
//    jvmArgs = ["-Djmh.ignoreLock=true"]
//    jvmArgsAppend = ["-Djmh.separateClasspathJAR=true"]
//
//    if (project.hasProperty("jmh")) {
//        include = ".*" + project.jmh + ".*"
//        println("JMH: " + include);
//    }
//
//}

//plugins.withType(EclipsePlugin) {
//    project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
//}

test {

    testLogging  {
        // showing skipped occasionally should prevent CI timeout due to lack of standard output
        events=["skipped", "failed"] // "started", "passed"
        // showStandardStreams = true
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }

    maxHeapSize = "1200m"

    if (System.getenv("CI") == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging  {
        events=["skipped", "failed"]
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }
}

check.dependsOn testng

jacoco {
    toolVersion = jacocoVersion // See http://www.eclemma.org/jacoco/.
}

//task GCandMem(dependsOn: "check") doLast {
//    print("Memory usage before: ")
//    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
//    System.gc()
//    Thread.sleep(200)
//    print("Memory usage: ")
//    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
//}
//
//task GCandMem2(dependsOn: "test") doLast {
//    print("Memory usage before: ")
//    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
//    System.gc()
//    Thread.sleep(200)
//    print("Memory usage: ")
//    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
//}
//
//testng.dependsOn GCandMem2

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["io/reactivex/tck/**"])
        })
    }
}

//jacocoTestReport.dependsOn GCandMem

build.dependsOn jacocoTestReport

//checkstyle {
//    configFile file("checkstyle.xml")
//    ignoreFailures = true
//    toolVersion ="6.19"
//}

if (rootProject.hasProperty("releaseMode")) {

    if ("branch".equals(rootProject.releaseMode)) {
        // From https://github.com/ReactiveX/RxAndroid/blob/2.x/rxandroid/build.gradle#L94

        println("ReleaseMode: " + rootProject.releaseMode);
        artifactory {
            contextUrl = "https://oss.jfrog.org"

            publish {
                repository {
                    repoKey = "oss-snapshot-local"

                    username = rootProject.bintrayUser
                    password = rootProject.bintrayKey
                }

                defaults {
                    publishConfigs("archives")
                }
            }
        }

        build.finalizedBy(artifactoryPublish)
    }

    if ("full".equals(rootProject.releaseMode)) {
        // based on https://github.com/bintray/gradle-bintray-plugin
        def rver = version;

        println("ReleaseMode: " + rootProject.releaseMode + " version " + rver);

        bintray {
            user = rootProject.bintrayUser
            key = rootProject.bintrayKey
            configurations = ["archives"]
            publish = true
            pkg {
                repo = "tron"
                name = "chainbase"
                userOrg = "tron.network"
                labels = ["chainbase"]
                licenses = ["GNU Lesser General Public License v3.0"]
                vcsUrl = "https://github.com/tronprotocol/chainbase.git"
                version {
                    name = rver
                    gpg {
                        sign = true
                    }
                    mavenCentralSync {
                        sync = true
                        user = rootProject.sonatypeUsername
                        password = rootProject.sonatypePassword
                        close = "1"
                    }
                }
            }
        }

        build.finalizedBy(bintrayUpload)
    }
}

//apply from: file("gradle/javadoc_cleanup.gradle")
